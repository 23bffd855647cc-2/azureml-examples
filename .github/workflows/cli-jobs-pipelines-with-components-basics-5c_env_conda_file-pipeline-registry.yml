# This code is autogenerated.
# Code is generated by running custom script: python3 readme.py
# Any manual changes to this file may cause incorrect behavior.
# Any manual changes will be overwritten if the code is regenerated.

name: cli-jobs-pipelines-with-components-basics-5c_env_conda_file-pipeline-registry
on:
  workflow_dispatch:
  schedule:
    - cron: "4 6/12 * * *"
  pull_request:
    branches:
      - main
    paths:
      - cli/jobs/pipelines-with-components/basics/5c_env_conda_file/**
      - infra/bootstrapping/**
      - .github/workflows/cli-jobs-pipelines-with-components-basics-5c_env_conda_file-pipeline-registry.yml
      - cli/run-pipeline-jobs.sh
      - cli/setup.sh
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZUREML_CREDENTIALS}}
    - name: bootstrap resources
      run: |
          echo '${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}';
          bash bootstrap.sh
      working-directory: infra/bootstrapping
      continue-on-error: false
    - name: setup-cli
      run: |
          source "${{ github.workspace }}/infra/bootstrapping/sdk_helpers.sh";
          source "${{ github.workspace }}/infra/bootstrapping/init_environment.sh";
          bash setup.sh
      working-directory: cli
      continue-on-error: true
    - name: run job
      run: |
          source "${{ github.workspace }}/infra/bootstrapping/sdk_helpers.sh";
          source "${{ github.workspace }}/infra/bootstrapping/init_environment.sh";
          log_output=$(bash -x ../../../../run-pipeline-job-with-registry-components.sh pipeline 5c_env_conda_file 2>&1)
          echo "$log_output" > sample.log
          cat sample.log
      working-directory: cli/jobs/pipelines-with-components/basics/5c_env_conda_file
    - name: Determine Failure Reason
      run: |
          failure_reason="N/A"
          if [ "${{ job.status }}" == "failure" ]; then
            if grep -q "ResourceNotReady" sample.log; then
              failure_reason = "ResourceNotReady"
            elif grep -q "quota" sample.log; then
              failure_reason="QuotaIssue"
            elif grep -q "ParentResourceNotFound" sample.log; then
              failure_reason="ParentResourceNotFound"
            else
              failure_reason="UncategorizedFailure"
            fi
          fi
          echo "FAILURE_REASON=$failure_reason" >> $GITHUB_ENV
      working-directory: cli/jobs/pipelines-with-components/basics/5c_env_conda_file
      if: ${{ always() }}
      continue-on-error: true
    - name: Log Job Results to Application Insights
      uses: syedhassaanahmed/app-insights-event-action@main
      with:
          instrumentation-key: "${{ secrets.APP_INSIGHTS_INSTRUMENTATION_KEY }}"
          event-name: "${{ job.status }}_${{ env.FAILURE_REASON }}"
      if: always()
